{"version":3,"file":"component---src-pages-index-js-ff6ea6f8acedb1e62f7d.js","mappings":"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","sources":["webpack://skohub-vocabs/./src/pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Link } from \"gatsby\"\nimport { i18n, getFilePath, getLanguageFromUrl } from \"../common\"\nimport { useSkoHubContext } from \"../context/Context\"\nimport { getUserLang } from \"../hooks/getUserLanguage\"\nimport { getConfigAndConceptSchemes } from \"../hooks/configAndConceptSchemes.js\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ location }) => {\n  const [conceptSchemes, setConceptSchemes] = useState([])\n  const [language, setLanguage] = useState(\"\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const { data, updateState } = useSkoHubContext()\n  const { config } = getConfigAndConceptSchemes()\n  const customDomain = config.customDomain\n\n  useEffect(() => {\n    async function fetchConceptData() {\n      const res = await fetch(\"index.json\")\n      const csData = await res.json()\n      setConceptSchemes(csData)\n      const languages = Array.from(\n        new Set([...csData.flatMap((cs) => cs.languages)])\n      )\n      updateState({ ...data, languages: languages, indexPage: true })\n    }\n    fetchConceptData()\n  }, [])\n\n  // set language stuff\n  useEffect(() => {\n    const languageFromUrl = getLanguageFromUrl(location)\n    if (languageFromUrl && !data.selectedLanguage) {\n      const userLang = getUserLang({\n        availableLanguages: data.languages,\n        selectedLanguage: languageFromUrl,\n      })\n\n      setLanguage(userLang)\n      updateState({\n        ...data,\n        selectedLanguage: userLang,\n        indexPage: true,\n        currentScheme: {},\n      })\n    } else {\n      const userLang = getUserLang({\n        availableLanguages: data.languages,\n        selectedLanguage: data?.selectedLanguage || null,\n      })\n      setLanguage(userLang)\n      updateState({\n        ...data,\n        selectedLanguage: userLang,\n        indexPage: true,\n        currentScheme: {},\n      })\n    }\n  }, [data?.languages, data?.selectedLanguage])\n\n  const getTitle = (conceptScheme) => {\n    const title =\n      i18n(language)(\n        conceptScheme?.title ||\n          conceptScheme?.prefLabel ||\n          conceptScheme?.dc_title\n      ) || conceptScheme.id\n    if (title) {\n      return title\n    }\n    return conceptScheme.id\n  }\n\n  return (\n    <Layout language={language}>\n      <SEO title=\"Concept Schemes\" keywords={[\"conceptSchemes\"]} />\n\n      <div className=\"centerPage block\">\n        {conceptSchemes.length > 4 && (\n          <div style={{ marginBottom: \"20px\" }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search concept schemes...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              style={{\n                width: \"100%\",\n                padding: \"10px\",\n                fontSize: \"16px\",\n                border: \"1px solid #ccc\",\n                borderRadius: \"4px\",\n              }}\n            />\n          </div>\n        )}\n        <ul>\n          {conceptSchemes\n            .filter((conceptScheme) => {\n              const title = getTitle(conceptScheme)\n              return title.toLowerCase().includes(searchTerm.toLowerCase())\n            })\n            .sort((a, b) => {\n              const titleA =\n                i18n(language)(a.prefLabel || a.title || a.dc_title) || a.id\n              const titleB =\n                i18n(language)(b.prefLabel || b.title || b.dc_title) || b.id\n              return titleA.localeCompare(titleB)\n            })\n            .map((conceptScheme) => (\n              <li key={conceptScheme.id}>\n                <Link\n                  onClick={() =>\n                    updateState({\n                      ...data,\n                      conceptSchemeLanguages: [...conceptScheme.languages],\n                      currentScheme: conceptScheme,\n                      selectedLanguage: conceptScheme.languages.includes(\n                        language\n                      )\n                        ? language\n                        : conceptScheme.languages[0],\n                    })\n                  }\n                  to={getFilePath(conceptScheme.id, `html`, customDomain)}\n                >\n                  {getTitle(conceptScheme)}\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"names":["_ref","location","conceptSchemes","setConceptSchemes","useState","language","setLanguage","searchTerm","setSearchTerm","data","updateState","useSkoHubContext","config","getConfigAndConceptSchemes","customDomain","useEffect","async","res","fetch","csData","json","languages","Array","from","Set","_toConsumableArray","flatMap","cs","indexPage","fetchConceptData","languageFromUrl","getLanguageFromUrl","selectedLanguage","userLang","getUserLang","availableLanguages","currentScheme","getTitle","conceptScheme","title","i18n","prefLabel","dc_title","id","___EmotionJSX","Layout","SEO","keywords","className","length","style","marginBottom","type","placeholder","value","onChange","e","target","width","padding","fontSize","border","borderRadius","filter","toLowerCase","includes","sort","a","b","titleA","titleB","localeCompare","map","key","Link","onClick","conceptSchemeLanguages","to","getFilePath"],"sourceRoot":""}